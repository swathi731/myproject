package com.sathya.springboot.product.service;


import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.sathya.springboot.product.entity.Productentity;
import com.sathya.springboot.product.model.Product;


@Service
public class Productservice {


    
	@Autowired
    private com.sathya.springboot.product.repository.productrepository productrepository;
	
	

    public void saveProductDetails(Product productmodel) {
        double stockValue = productmodel.getPrice() * productmodel.getQuantity();
        double discountPrice = productmodel.getPrice() * productmodel.getDiscountrate() / 100;
        double taxPrice = productmodel.getPrice();
        double offerPrice = productmodel.getPrice() - discountPrice;
        double finalPrice = offerPrice + taxPrice;

        Productentity productEntity = new Productentity();

        productEntity.setName(productmodel.getName());
        productEntity.setPrice(productmodel.getPrice());
        productEntity.setQuantity(productmodel.getQuantity());
        productEntity.setStockvalue(stockValue);
        productEntity.setDiscountprice(discountPrice);
        productEntity.setTaxrate(taxPrice);
        productEntity.setOfferprice(offerPrice);
        productEntity.setFinalprice(finalPrice);
        productEntity.setBrand(productmodel.getBrand());
        productEntity.setMadein(productmodel.getMadein());
        productEntity.setDiscountrate(productmodel.getDiscountrate());
    
        

        productrepository.save(productEntity);
    }
        
		
		public Productentity searchByid(Long id) {
			
		Optional<Productentity>optionaldata=productrepository.findById(id);
        if(optionaldata.isPresent())
        {
        	Productentity product=optionaldata.get();
        	return product;
        }
        else {
			return null;
		}
    }
        

    

	public List<Productentity> getallproduct() {
		List<Productentity>products=productrepository.findAll();
		return products;
	}




	public Productentity searchbyid(long id) {
		
		return null;
	}
	public void deletebyid(long id) {
		productrepository.deleteById(id);
	}


	public void updateProductDetails(Productentity product) {
	        Optional<Productentity> existingProductOpt = productrepository.findById(product.getId());
	        if (existingProductOpt.isPresent()) {
	            Productentity existingProduct = existingProductOpt.get();
	            existingProduct.setName(product.getName());
	            existingProduct.setPrice(product.getPrice());
	            existingProduct.setQuantity(product.getQuantity());
	            existingProduct.setStockvalue(product.getPrice() * product.getQuantity());
	            existingProduct.setDiscountprice(product.getPrice() * product.getDiscountrate() / 100);
	            existingProduct.setTaxrate(product.getTaxrate());
	            existingProduct.setOfferprice(product.getPrice() - existingProduct.getDiscountprice());
	            existingProduct.setFinalprice(existingProduct.getOfferprice() + product.getTaxrate());
	            existingProduct.setBrand(product.getBrand());
	            existingProduct.setMadein(product.getMadein());
	            existingProduct.setDiscountrate(product.getDiscountrate());

	            productrepository.save(existingProduct);

		
		
	}
	}
}
